apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "com.indiegen.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../app/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task debug(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
    debug = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = "dark-tactics-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}

dependencies {
    compile project(":game")
    compile "com.badlogicgames.gdx:gdx-backend-lwjgl:1.9.6"
    compile "com.badlogicgames.gdx:gdx-platform:1.9.6:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-box2d-platform:1.9.6:natives-desktop"
}